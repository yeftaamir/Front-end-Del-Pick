// lib/Models/driver_review.dart
import 'customer.dart';
import 'driver.dart';
import 'order.dart';
import 'service_order.dart';

enum ReviewType {
  order,
  serviceOrder,
}

extension ReviewTypeExtension on ReviewType {
  String get value {
    switch (this) {
      case ReviewType.order:
        return 'order';
      case ReviewType.serviceOrder:
        return 'service_order';
    }
  }

  static ReviewType fromString(String value) {
    switch (value.toLowerCase()) {
      case 'order':
        return ReviewType.order;
      case 'service_order':
        return ReviewType.serviceOrder;
      default:
        return ReviewType.order;
    }
  }
}

class DriverReviewModel {
  final int id;
  final int? orderId; // for regular order reviews
  final int? serviceOrderId; // for service order reviews
  final int driverId;
  final int customerId;
  final int rating;
  final String? comment;
  final bool isAutoGenerated;
  final DateTime createdAt;
  final DateTime updatedAt;

  // Service order specific ratings
  final int? serviceQuality;
  final int? punctuality;
  final int? communication;

  // Related models
  final OrderModel? order;
  final ServiceOrderModel? serviceOrder;
  final DriverModel? driver;
  final CustomerModel? customer;

  const DriverReviewModel({
    required this.id,
    required this.driverId,
    required this.customerId,
    required this.rating,
    required this.createdAt,
    required this.updatedAt,
    this.orderId,
    this.serviceOrderId,
    this.comment,
    this.isAutoGenerated = false,
    this.serviceQuality,
    this.punctuality,
    this.communication,
    this.order,
    this.serviceOrder,
    this.driver,
    this.customer,
  });

  factory DriverReviewModel.fromJson(Map<String, dynamic> json) {
    return DriverReviewModel(
      id: json['id'] ?? 0,
      orderId: json['order_id'],
      serviceOrderId: json['service_order_id'],
      driverId: json['driver_id'] ?? 0,
      customerId: json['customer_id'] ?? 0,
      rating: json['rating'] ?? 5,
      comment: json['comment'],
      isAutoGenerated: json['is_auto_generated'] ?? false,
      serviceQuality: json['service_quality'],
      punctuality: json['punctuality'],
      communication: json['communication'],
      createdAt: DateTime.parse(json['created_at']),
      updatedAt: DateTime.parse(json['updated_at']),
      order: json['order'] != null ? OrderModel.fromJson(json['order']) : null,
      serviceOrder: json['service_order'] != null ? ServiceOrderModel.fromJson(json['service_order']) : null,
      driver: json['driver'] != null ? DriverModel.fromJson(json['driver']) : null,
      customer: json['customer'] != null ? CustomerModel.fromJson(json['customer']) : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'order_id': orderId,
      'service_order_id': serviceOrderId,
      'driver_id': driverId,
      'customer_id': customerId,
      'rating': rating,
      'comment': comment,
      'is_auto_generated': isAutoGenerated,
      'service_quality': serviceQuality,
      'punctuality': punctuality,
      'communication': communication,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
      if (order != null) 'order': order!.toJson(),
      if (serviceOrder != null) 'service_order': serviceOrder!.toJson(),
      if (driver != null) 'driver': driver!.toJson(),
      if (customer != null) 'customer': customer!.toJson(),
    };
  }

  DriverReviewModel copyWith({
    int? id,
    int? orderId,
    int? serviceOrderId,
    int? driverId,
    int? customerId,
    int? rating,
    String? comment,
    bool? isAutoGenerated,
    int? serviceQuality,
    int? punctuality,
    int? communication,
    DateTime? createdAt,
    DateTime? updatedAt,
    OrderModel? order,
    ServiceOrderModel? serviceOrder,
    DriverModel? driver,
    CustomerModel? customer,
  }) {
    return DriverReviewModel(
      id: id ?? this.id,
      orderId: orderId ?? this.orderId,
      serviceOrderId: serviceOrderId ?? this.serviceOrderId,
      driverId: driverId ?? this.driverId,
      customerId: customerId ?? this.customerId,
      rating: rating ?? this.rating,
      comment: comment ?? this.comment,
      isAutoGenerated: isAutoGenerated ?? this.isAutoGenerated,
      serviceQuality: serviceQuality ?? this.serviceQuality,
      punctuality: punctuality ?? this.punctuality,
      communication: communication ?? this.communication,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      order: order ?? this.order,
      serviceOrder: serviceOrder ?? this.serviceOrder,
      driver: driver ?? this.driver,
      customer: customer ?? this.customer,
    );
  }

  // Utility methods
  ReviewType get reviewType {
    if (serviceOrderId != null) return ReviewType.serviceOrder;
    return ReviewType.order;
  }

  String get reviewTypeDisplayText {
    switch (reviewType) {
      case ReviewType.order:
        return 'Review Order';
      case ReviewType.serviceOrder:
        return 'Review Jasa Titip';
    }
  }

  bool get hasComment => comment != null && comment!.isNotEmpty;

  String get ratingDisplayText {
    switch (rating) {
      case 1:
        return 'Sangat Kurang';
      case 2:
        return 'Kurang';
      case 3:
        return 'Cukup';
      case 4:
        return 'Bagus';
      case 5:
        return 'Sangat Bagus';
      default:
        return 'Tidak Ada Rating';
    }
  }

  String get formattedDate {
    return '${createdAt.day}/${createdAt.month}/${createdAt.year}';
  }

  String get formattedDateTime {
    return '${createdAt.day}/${createdAt.month}/${createdAt.year} ${createdAt.hour}:${createdAt.minute.toString().padLeft(2, '0')}';
  }

  String get autoGeneratedText => isAutoGenerated ? 'Review Otomatis' : 'Review Customer';

  // Service order specific methods
  bool get hasServiceQualityRating => serviceQuality != null;
  bool get hasPunctualityRating => punctuality != null;
  bool get hasCommunicationRating => communication != null;

  double? get averageDetailedRating {
    if (!hasServiceQualityRating && !hasPunctualityRating && !hasCommunicationRating) {
      return null;
    }

    final ratings = <int>[];
    if (serviceQuality != null) ratings.add(serviceQuality!);
    if (punctuality != null) ratings.add(punctuality!);
    if (communication != null) ratings.add(communication!);

    if (ratings.isEmpty) return null;

    return ratings.reduce((a, b) => a + b) / ratings.length;
  }

  String? get serviceQualityText {
    if (serviceQuality == null) return null;
    return _getRatingText(serviceQuality!);
  }

  String? get punctualityText {
    if (punctuality == null) return null;
    return _getRatingText(punctuality!);
  }

  String? get communicationText {
    if (communication == null) return null;
    return _getRatingText(communication!);
  }

  // Star rating helpers
  List<bool> get starStates {
    final stars = <bool>[];
    for (int i = 1; i <= 5; i++) {
      stars.add(i <= rating);
    }
    return stars;
  }

  List<bool>? get serviceQualityStars {
    if (serviceQuality == null) return null;
    final stars = <bool>[];
    for (int i = 1; i <= 5; i++) {
      stars.add(i <= serviceQuality!);
    }
    return stars;
  }

  List<bool>? get punctualityStars {
    if (punctuality == null) return null;
    final stars = <bool>[];
    for (int i = 1; i <= 5; i++) {
      stars.add(i <= punctuality!);
    }
    return stars;
  }

  List<bool>? get communicationStars {
    if (communication == null) return null;
    final stars = <bool>[];
    for (int i = 1; i <= 5; i++) {
      stars.add(i <= communication!);
    }
    return stars;
  }

  // Validation methods
  static Map<String, String?> validateReviewInput({
    required int rating,
    String? comment,
    int? serviceQuality,
    int? punctuality,
    int? communication,
  }) {
    final errors = <String, String?>{};

    if (rating < 1 || rating > 5) {
      errors['rating'] = 'Rating harus antara 1 dan 5';
    }

    if (serviceQuality != null && (serviceQuality < 1 || serviceQuality > 5)) {
      errors['service_quality'] = 'Rating kualitas layanan harus antara 1 dan 5';
    }

    if (punctuality != null && (punctuality < 1 || punctuality > 5)) {
      errors['punctuality'] = 'Rating ketepatan waktu harus antara 1 dan 5';
    }

    if (communication != null && (communication < 1 || communication > 5)) {
      errors['communication'] = 'Rating komunikasi harus antara 1 dan 5';
    }

    if (comment != null && comment.length > 500) {
      errors['comment'] = 'Komentar maksimal 500 karakter';
    }

    return errors;
  }

  // Summary for display
  String get reviewSummary {
    final customerName = customer?.name ?? 'Customer';
    final targetName = reviewType == ReviewType.serviceOrder ? 'jasa titip' : 'order';

    return '$customerName memberikan rating $rating/5 untuk $targetName';
  }

  // Get review completeness score (for service orders)
  double get completenessScore {
    if (reviewType == ReviewType.order) return 1.0;

    int totalFields = 4; // rating + 3 detailed ratings
    int filledFields = 1; // rating is always filled

    if (serviceQuality != null) filledFields++;
    if (punctuality != null) filledFields++;
    if (communication != null) filledFields++;

    return filledFields / totalFields;
  }

  bool get isCompleteReview => completenessScore >= 0.75; // 75% complete

  // PRIVATE HELPER METHODS

  String _getRatingText(int rating) {
    switch (rating) {
      case 1:
        return 'Sangat Kurang';
      case 2:
        return 'Kurang';
      case 3:
        return 'Cukup';
      case 4:
        return 'Bagus';
      case 5:
        return 'Sangat Bagus';
      default:
        return 'Tidak Ada Rating';
    }
  }
}